import discord
from discord.ext import commands
import os
from datetime import datetime
import asyncio
import hashlib
import asyncpg
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('DISCORD_TOKEN')
REGISTRATION_CHANNEL_ID = 1378013945687838853
LOGS_CHANNEL_ID = 1378379841555922994
PASSWORD_LOGS_CHANNEL_ID = 1378380786410983656
REQUIRED_ROLE_IDS = [1382036523511320710, 1382038519626858658, 1382038794886447236]
GIF_URL = 'https://media.discordapp.net/attachments/1182720165645918289/1183684888147279872/4242342343123.gif?ex=68493c75&is=6847eaf5&hm=7a345ec08313a491247d6bfc34729ab3c3e90e789f159953d9735e9bd478563e&=&width=440&height=248'

# PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_NAME = os.getenv('DB_NAME', 'utopia_bot')
DB_USER = os.getenv('DB_USER', 'botuser')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'your_secure_password')


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


class DatabaseManager:
    def __init__(self):
        self.pool = None

    async def connect(self):
        self.pool = await asyncpg.create_pool(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with self.pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    discord_id BIGINT PRIMARY KEY,
                    discord_name TEXT NOT NULL,
                    nickname TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    registered_at TIMESTAMP NOT NULL,
                    password_changed_at TIMESTAMP
                )
            ''')

    async def get_user(self, discord_id):
        async with self.pool.acquire() as conn:
            return await conn.fetchrow('SELECT * FROM users WHERE discord_id = $1', discord_id)

    async def user_exists(self, discord_id):
        user = await self.get_user(discord_id)
        return user is not None

    async def nickname_exists(self, nickname):
        async with self.pool.acquire() as conn:
            result = await conn.fetchrow('SELECT 1 FROM users WHERE LOWER(nickname) = LOWER($1)', nickname)
            return result is not None

    async def create_user(self, discord_id, discord_name, nickname, password_hash):
        async with self.pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO users (discord_id, discord_name, nickname, password, registered_at)
                VALUES ($1, $2, $3, $4, $5)
            ''', discord_id, discord_name, nickname, password_hash, datetime.now())

    async def update_password(self, discord_id, new_password_hash):
        async with self.pool.acquire() as conn:
            await conn.execute('''
                UPDATE users SET password = $1, password_changed_at = $2
                WHERE discord_id = $3
            ''', new_password_hash, datetime.now(), discord_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
db = DatabaseManager()


class RegistrationModal(discord.ui.Modal, title='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Utopia Studio'):
    nickname = discord.ui.TextInput(
        label='–í–ê–® –ù–ò–ö–ù–ï–ô–ú?',
        placeholder='–≠—Ç–æ—Ç –Ω–∏–∫ –±—É–¥–µ—Ç –≤ –≤–∞—à–µ–º –º–∏—Ä–µ',
        required=True,
        min_length=3,
        max_length=16
    )

    password = discord.ui.TextInput(
        label='–ü–†–ò–î–£–ú–ê–ô–¢–ï –ü–ê–†–û–õ–¨',
        placeholder='–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
        required=True,
        min_length=6,
        max_length=32,
        style=discord.TextStyle.short
    )

    password_confirm = discord.ui.TextInput(
        label='–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ü–ê–†–û–õ–¨',
        placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
        required=True,
        min_length=6,
        max_length=32,
        style=discord.TextStyle.short
    )

    agree = discord.ui.TextInput(
        label='–í–´ –°–û–ì–õ–ê–°–ù–´ –° –ü–†–ê–í–ò–õ–ê–ú–ò? (–î–ê/–ù–ï–¢)',
        placeholder='–ù–∞–ø–∏—à–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢',
        required=True,
        min_length=2,
        max_length=3
    )

    async def on_submit(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
        if self.password.value != self.password_confirm.value:
            await interaction.response.send_message('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
        if self.agree.value.upper() != '–î–ê':
            await interaction.response.send_message('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
        member = interaction.guild.get_member(interaction.user.id)
        if not any(role.id in REQUIRED_ROLE_IDS for role in member.roles):
            await interaction.response.send_message('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ Boosty!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
        if await db.nickname_exists(self.nickname.value):
            await interaction.response.send_message('‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if await db.user_exists(interaction.user.id):
            await interaction.response.send_message('‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', ephemeral=True)
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        await db.create_user(
            interaction.user.id,
            str(interaction.user),
            self.nickname.value,
            hash_password(self.password.value)
        )

        await interaction.response.send_message('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ª–∞—É–Ω—á–µ—Ä.',
                                                ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
        logs_channel = interaction.guild.get_channel(LOGS_CHANNEL_ID)
        if logs_channel:
            embed = discord.Embed(
                title='üìù –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            embed.add_field(name='Discord', value=f'{interaction.user.mention} ({interaction.user})', inline=False)
            embed.add_field(name='Discord ID', value=str(interaction.user.id), inline=True)
            embed.add_field(name='–ù–∏–∫–Ω–µ–π–º', value=self.nickname.value, inline=True)
            embed.add_field(name='–ü–∞—Ä–æ–ª—å (—Ö–µ—à)', value=f'||{hash_password(self.password.value)[:16]}...||',
                            inline=False)
            embed.add_field(name='–°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', value=self.agree.value, inline=True)
            embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', value=datetime.now().strftime('%d.%m.%Y %H:%M:%S'), inline=True)
            embed.set_footer(text='Utopia Studio Registration System')

            await logs_channel.send(embed=embed)


class ChangePasswordModal(discord.ui.Modal, title='–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è'):
    old_password = discord.ui.TextInput(
        label='–¢–ï–ö–£–©–ò–ô –ü–ê–†–û–õ–¨',
        placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
        required=True,
        style=discord.TextStyle.short
    )

    new_password = discord.ui.TextInput(
        label='–ù–û–í–´–ô –ü–ê–†–û–õ–¨',
        placeholder='–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
        required=True,
        min_length=6,
        max_length=32,
        style=discord.TextStyle.short
    )

    new_password_confirm = discord.ui.TextInput(
        label='–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ù–û–í–´–ô –ü–ê–†–û–õ–¨',
        placeholder='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
        required=True,
        min_length=6,
        max_length=32,
        style=discord.TextStyle.short
    )

    async def on_submit(self, interaction: discord.Interaction):
        user = await db.get_user(interaction.user.id)

        if not user:
            await interaction.response.send_message('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è
        if user['password'] != hash_password(self.old_password.value):
            await interaction.response.send_message('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!', ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π
        if self.new_password.value != self.new_password_confirm.value:
            await interaction.response.send_message('‚ùå –ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!', ephemeral=True)
            return

        # –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        old_hash = user['password']
        new_hash = hash_password(self.new_password.value)
        await db.update_password(interaction.user.id, new_hash)

        await interaction.response.send_message('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞
        logs_channel = interaction.guild.get_channel(PASSWORD_LOGS_CHANNEL_ID)
        if logs_channel:
            embed = discord.Embed(
                title='üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è',
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            embed.add_field(name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value=f'{interaction.user.mention} ({interaction.user})', inline=False)
            embed.add_field(name='Discord ID', value=str(interaction.user.id), inline=True)
            embed.add_field(name='–ù–∏–∫–Ω–µ–π–º', value=user['nickname'], inline=True)
            embed.add_field(name='–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å (—Ö–µ—à)', value=f'||{old_hash[:16]}...||', inline=False)
            embed.add_field(name='–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (—Ö–µ—à)', value=f'||{new_hash[:16]}...||', inline=False)
            embed.add_field(name='–î–∞—Ç–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è', value=datetime.now().strftime('%d.%m.%Y %H:%M:%S'), inline=False)
            embed.set_footer(text='Utopia Studio Password Change System')

            await logs_channel.send(embed=embed)


class RegistrationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', style=discord.ButtonStyle.primary, custom_id='register')
    async def register(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(RegistrationModal())

    @discord.ui.button(label='–ü—Ä–æ—Ñ–∏–ª—å', style=discord.ButtonStyle.secondary, custom_id='profile')
    async def profile(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = await db.get_user(interaction.user.id)

        if not user:
            await interaction.response.send_message('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', ephemeral=True)
            return

        embed = discord.Embed(
            title='üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
            color=discord.Color.blue()
        )
        embed.add_field(name='–ù–∏–∫–Ω–µ–π–º', value=user['nickname'], inline=True)
        embed.add_field(name='Discord', value=interaction.user.mention, inline=True)
        embed.add_field(name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', value=user['registered_at'].strftime('%d.%m.%Y %H:%M:%S'),
                        inline=False)

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label='–°–∫–∞—á–∞—Ç—å –ª–∞—É–Ω—á–µ—Ä', style=discord.ButtonStyle.success, custom_id='download')
    async def download(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not await db.user_exists(interaction.user.id):
            await interaction.response.send_message('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!', ephemeral=True)
            return

        await interaction.response.send_message('üì• –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: https://example.com/launcher.exe',
                                                ephemeral=True)

    @discord.ui.button(label='–ü—Ä–∞–≤–∏–ª–∞', style=discord.ButtonStyle.danger, custom_id='rules')
    async def rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title='üìú –ü—Ä–∞–≤–∏–ª–∞ Utopia Studio',
            description='1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏\n2. –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç = –æ–¥–∏–Ω –∏–≥—Ä–æ–∫\n3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Ç—ã\n4. –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label='–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', style=discord.ButtonStyle.secondary, custom_id='change_password')
    async def change_password(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(ChangePasswordModal())


# –ë–æ—Ç
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)


@bot.event
async def on_ready():
    print(f'{bot.user} –∑–∞–ø—É—â–µ–Ω!')
    await db.connect()
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')
    bot.add_view(RegistrationView())


@bot.command()
@commands.has_permissions(administrator=True)
async def setup(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    embed = discord.Embed(
        title='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Utopia Studio',
        description='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
        color=discord.Color.blue()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
    embed.set_image(url=GIF_URL)

    view = RegistrationView()
    await ctx.send(embed=embed, view=view)
    await ctx.message.delete()


# API –¥–ª—è –ª–∞—É–Ω—á–µ—Ä–∞
@bot.command()
@commands.has_permissions(administrator=True)
async def api_info(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    embed = discord.Embed(
        title='API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        description=f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL\n–•–æ—Å—Ç: {DB_HOST}\n–ü–æ—Ä—Ç: 5432\n–ë–∞–∑–∞: {DB_NAME}',
        color=discord.Color.green()
    )
    await ctx.send(embed=embed, delete_after=30)


bot.run(TOKEN)
